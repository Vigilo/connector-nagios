[bus]
# Liste des serveurs AMQP (noms ou adresses IP) à utiliser,
# séparés par des virgules. Un numéro de port peut être spécifié
# en ajoutant ":" suivi du numéro après le nom / l'adresse du serveur.
# Par défaut, le port 5672 est utilisé lorsque l'option "use_ssl" vaut
# False ou 5671 lorsque l'option vaut True.
hosts = localhost

# Nom d'utilisateur à utiliser pour se connecter au bus.
user = connector-nagios

# Mot de passe à utiliser
password = connector-nagios

# Chiffrement du flux par SSL
use_ssl = False

# Nom de la file d'attente du connecteur
queue = connector-nagios-localhost

# Durée de vie des messages en secondes (0 si infinie)
# Note : La durée de vie s'applique directement au niveau de la file d'attente
#        du connecteur, si un message dépasse cette durée de vie le bus le
#        supprimera.
#queue_messages_ttl = 0

# Liste des abonnements du connecteur, séparés par des virgules.
# Si la liste est vide, mettre uniquement une virgule.
# Syntaxe : <nom-du-noeud>[:<clé-de-routage>]
# Exemple : foo:bar, baz:qux
subscriptions = nagios:all

# Le trafic lié au bus doit-il être enregistré dans les logs ?
log_traffic = False

# Nombre de messages à récupérer simultanément depuis le bus.
# La valeur par défaut (5) convient pour la plupart des déploiements.
# Une valeur plus élevée peut améliorer les performances pour les parcs
# de grande taille. Néanmoins, une valeur trop élevée peut également
# dégrader les performances.
#prefetch_count = 5

#-----------------------------------------
# Réglages pour un grand volume de données

# Nombre de messages de performance à envoyer dans un même message.
#  * avantage : augmente très largement le débit maximum
#  * inconvénient : si les messages de performance ne sont pas générés assez
#    vite, leur relai peut être retardé (on attend que le paquet soit plein)
# La valeur 0 ou 1 désactive cet envoi par paquets.
batch_send_perf = 1


[connector-nagios]
# Liste des types de commandes que le connecteur-nagios
# acceptera de transmettre à Nagios, séparés par des virgules.
# Si la liste est vide, mettre uniquement une virgule.
# La liste des types de commandes valides est disponible sur :
# http://www.nagios.org/developerinfo/externalcommands/
accepted_commands = PROCESS_SERVICE_CHECK_RESULT, PROCESS_HOST_CHECK_RESULT, SCHEDULE_HOST_DOWNTIME, SCHEDULE_SVC_DOWNTIME, SCHEDULE_SVC_CHECK, SCHEDULE_HOST_CHECK, SCHEDULE_HOST_SVC_CHECKS, CHANGE_NORMAL_HOST_CHECK_INTERVAL, CHANGE_NORMAL_SVC_CHECK_INTERVAL, SEND_CUSTOM_HOST_NOTIFICATION, SEND_CUSTOM_SVC_NOTIFICATION

# Emplacement du socket utilisé pour recevoir des messages de Nagios.
listen_unix = @localstatedir@/lib/vigilo/connector-nagios/send.sock

# Emplacement du pipe utilisé pour envoyer des commandes à Nagios.
nagios_pipe = @nagioscmdpipe@

# Fichier de config distribué par VigiConf
nagios_config = @sysconfdir@/vigilo/vigiconf/prod/nagios/nagios.cfg

#-----------------------------------------
# Réglages pour un grand volume de données

# Groupe les messages à destination de Nagios, et ne les transmet réellement
# que toutes les secondes, de manière asynchrone. Introduit un délai d'une
# seconde dans le traitement des messages, mais permet de gérer un plus grand
# volume de messages.
#group_nagios_commands = False


[connector]
# Emplacement du fichier de sauvegarde local en cas de pannes.
backup_file = @localstatedir@/lib/vigilo/connector-nagios/backup.sqlite

# Nom de la table qui stocke les messages en attente à destination du bus.
backup_table = tobus

# La taille maximum de la file d'attente mémoire, à partir de laquelle
# le connecteur jettera les messages les plus vieux.
# Une limite à 50000 correspond à environ 1Go de RAM utilisé.
# La valeur par défaut est 0, ce qui désactive cette vérification.
#max_queue_size = 0

# Nom d'hôte utilisé pour signaler que ce connecteur fonctionne.
# Cela doit correspondre au nom configuré pour cette machine dans VigiConf.
# Par défaut, le nom qualifié de la machine est utilisé.
#hostname = hostname

# Nom de service utilisé pour signaler que ce connecteur fonctionne.
# Ce nom doit correspondre au nom du service configuré dans VigiConf.
#status_service = vigilo-connector-nagios

# Ces paramètres permettent de surcharger les valeurs présentes dans la
# section [publications] pour les messages d'auto-supervision du connecteur.
#self_monitoring_nagios_exchange = nagios
#self_monitoring_perf_exchange = perf


[publications]
# Types de messages et le nom de l'exchange à utiliser pour leur publication.
# Par défaut, un exchange du même nom que le type est utilisé.
# Les entrées dans cette section sont de la forme :
#     type_de_message = exchange[:duree_de_vie_en_secondes]
#----------------------------------------------------
#perf = perf
#state = state
#event = event
#nagios = nagios


# -------
# Logging
#

[loggers]
keys = root,twisted

[handlers]
keys = syslog,console,errors

[formatters]
keys = consoleFormatter,syslogFormatter,errorFormatter

[logger_root]
level = INFO
handlers = console,errors

[logger_twisted]
level = WARNING
qualname = twisted
propagate = 0
handlers = console,errors

[handler_console]
class = StreamHandler
level = NOTSET
formatter = consoleFormatter
args = (sys.stdout,)

[handler_syslog]
class = handlers.SysLogHandler
level = NOTSET
formatter = syslogFormatter
args = '/dev/log', 'daemon'

[handler_errors]
level = ERROR
class = handlers.RotatingFileHandler
args = ('@localstatedir@/log/vigilo/connector-nagios/error.log', 'a', 1024*1024*10, 5)
formatter = errorFormatter

[formatter_consoleFormatter]
format = %(levelname)s::%(name)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_syslogFormatter]
format = %(processName)s[%(process)d]: %(levelname)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_errorFormatter]
format = %(asctime)s %(levelname)s %(name)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter
